generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model for owners and employees
model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  password        String
  role            UserRole          @default(USER)
  commerce        Commerce? // If user is an owner, they will have a commerce associated
  Booking         Booking[]
  RecurrentClient RecurrentClient[]
}

model Employee {
  id         Int       @id @default(autoincrement())
  Commerce   Commerce? @relation(fields: [commerceId], references: [id])
  commerceId Int?
  Booking    Booking[]
}

enum UserRole {
  USER
  ADMIN
}

enum Category {
  BARBER
  NAILS
  LASHES
  TATTOO
  MASSAGE
  DOCTOR
  BEAUTICIAN
  OTHER
}

// Model for Commerce
model Commerce {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String?
  category           Category
  owner              User                 @relation(fields: [ownerId], references: [id])
  ownerId            Int                  @unique // Owner of the commerce
  employees          Employee[] // Employees of the commerce
  bookings           Booking[] // Bookings associated with this commerce
  services           Service[] // Services offered by this commerce
  locations          Location[] // Locations of this commerce
  // Add other fields as needed (statistics, payments, history, etc.)
  RecurrentClient    RecurrentClient[]
  CommerceStatistics CommerceStatistics[]
  Payment            Payment[]
  CommerceHistory    CommerceHistory[]
}

// Model for Bookings
model Booking {
  id         Int      @id @default(autoincrement())
  commerce   Commerce @relation(fields: [commerceId], references: [id])
  commerceId Int
  client     User?    @relation(fields: [userId], references: [id]) // The client who made the booking, if available
  employee   Employee @relation(fields: [employeeId], references: [id]) // The employee who will handle the booking
  service    Service  @relation(fields: [serviceId], references: [id]) // Service booked
  startAt    DateTime
  endAt      DateTime
  attended   Boolean  @default(false)
  // Add other fields as needed
  userId     Int?
  employeeId Int
  serviceId  Int
}

// Model for Services
model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  commerce    Commerce  @relation(fields: [commerceId], references: [id])
  commerceId  Int
  // Add other fields as needed
  Booking     Booking[]
}

// Model for Locations
model Location {
  id         Int      @id @default(autoincrement())
  commerce   Commerce @relation(fields: [commerceId], references: [id])
  commerceId Int
  address    String
  // Add other fields as needed
}

// Model for Recurrent Clients
model RecurrentClient {
  id         Int      @id @default(autoincrement())
  commerce   Commerce @relation(fields: [commerceId], references: [id])
  commerceId Int
  client     User     @relation(fields: [userId], references: [id]) // The client who is recurrent
  // Add other fields as needed
  userId     Int
}

// Model for Statistics
model CommerceStatistics {
  id           Int      @id @default(autoincrement())
  commerce     Commerce @relation(fields: [commerceId], references: [id])
  commerceId   Int
  totalRevenue Float // Total revenue generated by the commerce
  // Add other statistics fields as needed
}

// Model for Payments
model Payment {
  id         Int      @id @default(autoincrement())
  commerce   Commerce @relation(fields: [commerceId], references: [id])
  commerceId Int
  amount     Float
  // Add other payment fields such as payment method, status, etc.
}

// Model for History (e.g., logs, activity history)
model CommerceHistory {
  id         Int      @id @default(autoincrement())
  commerce   Commerce @relation(fields: [commerceId], references: [id])
  commerceId Int
  action     String // Description of the action performed
  timestamp  DateTime // Timestamp of when the action occurred
  // Add other fields as needed for detailed history tracking
}
